services:
  keycloak:
    restart: always
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: dso-console_keycloak
    ports:
      - 8090:8080
    volumes:
      - ../keycloak/realms:/opt/keycloak/data/import
      - ../keycloak/data/dev:/opt/keycloak/data/h2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
    command: start-dev --import-realm
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - dso-network
    attach: false

  postgres:
    restart: always
    image: docker.io/postgres:15.3
    container_name: dso-console_postgres
    environment:
      POSTGRES_DB: dso-console-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - 5432:5432
    volumes:
      - dso-postgres-data-dev:/var/lib/postgresql/data
    networks:
      - dso-network
    attach: false

  pgadmin:
    restart: always
    image: docker.io/dpage/pgadmin4:8.5
    container_name: dso-console_pgadmin
    depends_on:
      - postgres
    volumes:
      - ../db/pgadmin/config/servers-docker.json:/pgadmin4/servers.json
      - dso-pgadmin-data-dev:/var/lib/pgadmin
    ports:
      - 8081:80
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dso.fr
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - dso-network
    attach: false

  server:
    restart: always
    build:
      context: ..
      dockerfile: apps/server/Dockerfile
      target: dev
    image: dso-console/server:dev
    container_name: dso-console_server
    command: ["dev"] # use "debug" to run debug mode
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_started
    ports:
      - 4000:8080
      - 9229:9229
    env_file:
      - ../apps/server/.env.docker
    develop:
      watch:
        - action: sync
          path: ../apps/server
          target: /app/apps/server
          ignore:
            - node_modules/
            - .env
            - .env.docker
            - .env.integ
        - action: sync
          path: ../packages/shared
          target: /app/packages/shared
          ignore:
            - node_modules/
        - action: sync
          path: ../packages/hooks
          target: /app/packages/hooks
          ignore:
            - node_modules/
        - action: sync
          path: ../plugins
          target: /app/plugins
          ignore:
            - node_modules/
        - action: rebuild
          path: ../apps/server/package.json
    networks:
      - dso-network
    attach: true

  client:
    restart: always
    build:
      context: ..
      dockerfile: apps/client/Dockerfile
      target: dev
    image: dso-console/client:dev
    container_name: dso-console_client
    depends_on:
      server:
        condition: service_started
    ports:
      - 8080:8080
    env_file:
      - ../apps/client/.env.docker
    develop:
      watch:
        - action: sync
          path: ../apps/client
          target: /app/apps/client
          ignore:
            - node_modules/
            - .env
            - .env.docker
            - .env.integ
        - action: sync
          path: ../packages/shared
          target: /app/packages/shared
          ignore:
            - node_modules/
        - action: rebuild
          path: ../apps/client/package.json
    networks:
      - dso-network
    attach: true

networks:
  dso-network:
    driver: bridge
    # driver_opts:
    # com.docker.network.driver.mtu: 1450

volumes:
  dso-pgadmin-data-dev:
  dso-postgres-data-dev:
