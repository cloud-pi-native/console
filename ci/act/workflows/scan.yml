name: Vulnerability scan

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      NAMESPACE:
        required: true
        type: string
      TAG:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      REGISTRY:
        description: Target registry to push images
        required: true
        type: string
        default: ghcr.io
      NAMESPACE:
        description: Target namespace to the given registry
        required: true
        type: string
        default: cloud-pi-native/console
      TAG:
        description: Tag used to scan images
        required: true
        type: string
        default: latest

jobs:
  matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.build-matrix.outputs.BUILD_MATRIX }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4

      - name: Generate matrix
        id: build-matrix
        run: |
          echo "BUILD_MATRIX=$(jq -c . < ./ci/matrix-docker.json)" >> $GITHUB_OUTPUT

  images-scan:
    name: Scan images vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - matrix
    strategy:
      matrix:
        images: ${{ fromJSON(needs.matrix.outputs.build-matrix) }}
    steps:
      - name: Set up Docker buildx
        if: ${{ matrix.images.build != false }}
        uses: docker/setup-buildx-action@v3

      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/images/

      - name: Run Trivy vulnerability scanner on images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }}:${{ inputs.TAG }}"
          format: json
          exit-code: "1"
          vuln-type: "os,library"
          ignore-unfixed: true
          output: "./artifacts/vulnerability-report/images/${{ matrix.images.name }}.json"
        continue-on-error: true

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-images
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  config-scan:
    name: Scan config files vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - matrix
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4

      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/configs/

      - name: Run Trivy vulnerability scanner on config files
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: .
          scan-type: config
          format: json
          exit-code: "1"
          ignore-unfixed: true
          output: ./artifacts/vulnerability-report/configs/config.json
        continue-on-error: true

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-config
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  vulnerability-report:
    name: Build vulnerability report
    runs-on: ubuntu-latest
    needs:
      - matrix
      - images-scan
      - config-scan
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: vulnerability-report-*
          path: ./artifacts/vulnerability-report
          merge-multiple: true

      - name: Build vulnerability report
        run: |
          ./ci/scripts/vuln-report.sh \
            -i "./artifacts/vulnerability-report" \
            -o "./artifacts/vulnerability-issue.md" \
            -p "${{ github.repository }}" \
            -r "${{ github.run_id }}"
          echo 'REPORT_BODY<<EOF' >> $GITHUB_ENV
          cat ./artifacts/vulnerability-issue.md >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Create security report issue
        uses: imjohnbo/issue-bot@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          labels: security
          title: Vulnerability scan report
          pinned: false
          close-previous: true
          body: ${{ env.REPORT_BODY }}
