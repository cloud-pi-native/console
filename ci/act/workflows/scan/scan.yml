name: Scan application

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
  workflow_dispatch:

env:
  TRIVY_VERSION: "0.37.2"

jobs:
  matrix:
    name: Generate matrix for build & scan
    if: ${{ !github.event.pull_request.draft && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.build-matrix.outputs.BUILD_MATRIX }}
      scan-matrix: ${{ steps.scan-matrix.outputs.SCAN_MATRIX }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Generate matrix for build
        id: build-matrix
        run: |
          echo 'BUILD_MATRIX<<EOF' >> $GITHUB_OUTPUT
          ./ci/scripts/build-matrix.sh -f ./docker/docker-compose.prod.yml -c | jq '[.[] | select(.build != false)]' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Generate matrix for scan
        id: scan-matrix
        run: |
          echo 'SCAN_MATRIX<<EOF' >> $GITHUB_OUTPUT
          ./ci/scripts/build-matrix.sh -f ./docker/docker-compose.prod.yml -c >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  build:
    name: Build application
    runs-on: ubuntu-latest
    needs:
      - matrix
    strategy:
      matrix:
        images: ${{ fromJSON(needs.matrix.outputs.build-matrix) }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2
        # with:
        #   driver-opts: network=host
      - name: Set up QEMU (for multi platform build)
        uses: docker/setup-qemu-action@v2
      - name: Create image directory
        run: mkdir ./artifacts
      - name: Build docker image
        run: |
          docker buildx build \
            --file ${{ matrix.images.build.dockerfile }} \
            --target ${{ matrix.images.build.target }} \
            --tag ${{ matrix.images.image }} \
            --platform ${{ matrix.images.build.platforms }} \
            --output type=docker,dest=./artifacts/${{ matrix.images.name }}.tar \
            ${{ matrix.images.build.context }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.images.name }}
          path: ./artifacts/${{ matrix.images.name }}.tar
          retention-days: 1

  images-scan:
    name: Scan images vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - matrix
      - build
    strategy:
      matrix:
        images: ${{ fromJSON(needs.matrix.outputs.scan-matrix) }}
    steps:
      - name: Set up Docker buildx
        if: ${{ matrix.images.build != false }}
        uses: docker/setup-buildx-action@v2
      - name: Download artifact
        if: ${{ matrix.images.build != false }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.images.name }}
          path: ./artifacts
      - name: Load Docker image
        if: ${{ matrix.images.build != false }}
        run: docker load --input ./artifacts/${{ matrix.images.name }}.tar
      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/images/
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
      - name: Run Trivy vulnerability scanner on config files
        run: |
          trivy image \
            --vuln-type os,library \
            --ignore-unfixed \
            --scanners vuln,secret,config \
            --format json \
            --output ./artifacts/vulnerability-report/images/${{ matrix.images.name }}.json \
            --exit-code 1 \
            ${{ matrix.images.image }}
        continue-on-error: true
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  config-scan:
    name: Scan config files vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - matrix
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/configs/
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
      - name: Run Trivy vulnerability scanner on config files
        run: |
          trivy config \
            --format json \
            --output ./artifacts/vulnerability-report/configs/config.json \
            --exit-code 1 \
            .
        continue-on-error: true
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  vulnerability-report:
    name: Build vulnerability report
    runs-on: ubuntu-latest
    needs:
      - matrix
      - images-scan
      - config-scan
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report
      - name: Build vulnerability report
        run: |
          ./ci/scripts/vuln-report.sh \
            -i "./artifacts/vulnerability-report" \
            -o "./artifacts/vulnerability-issue.md" \
            -p "${{ github.repository }}" \
            -r "${{ github.run_id }}"
      - name: Upload scan report
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-issue.md
          retention-days: 14
