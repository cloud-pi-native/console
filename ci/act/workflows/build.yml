name: Build

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      NAMESPACE:
        required: true
        type: string
      MULTIARCH:
        required: true
        type: boolean
      TAGS:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      REGISTRY:
        description: Target registry to push images
        required: true
        type: string
        default: ghcr.io
      NAMESPACE:
        description: Target namespace to the given registry
        required: true
        type: string
        default: cloud-pi-native/console
      MULTIARCH:
        description: Build for both amd64 and arm64 ?
        required: true
        type: boolean
        default: false

env:
  TAGS: ${{ inputs.TAGS || github.sha }}

jobs:
  build:
    name: Build application
    runs-on: ${{ matrix.runners }}
    strategy:
      matrix:
        runners: ${{ inputs.MULTIARCH && fromJson('["ubuntu-latest", "self-hosted"]') || 'ubuntu-latest' }}
        images:
          - name: server
            context: ./
            dockerfile: ./apps/server/Dockerfile
            target: prod
          - name: client
            context: ./
            dockerfile: ./apps/client/Dockerfile
            target: prod
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4

      - name: Generate docker tags
        id: tags
        run: |
          echo "DOCKER_TAGS=$(bash ./ci/scripts/build-tags.sh -i '${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }}' -t '${{ env.TAGS }}')" >> $GITHUB_ENV

      - name: Get first tag
        id: split
        run: echo "APP_VERSION=${TAGS%,*}" >> $GITHUB_OUTPUT

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Build and push docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.images.context }}
          file: ${{ matrix.images.dockerfile }}
          target: ${{ matrix.images.target }}
          provenance: false
          # push: true
          outputs: type=image,name=${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            APP_VERSION=${{ steps.split.outputs.APP_VERSION }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests/${{ matrix.images.name }}
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.images.name }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.images.name }}
          path: /tmp/digests/${{ matrix.images.name }}/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge digest
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        images:
          - name: server
            context: ./
            dockerfile: ./apps/server/Dockerfile
            target: prod
          - name: client
            context: ./
            dockerfile: ./apps/client/Dockerfile
            target: prod
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.images.name }}
          path: /tmp/digests/${{ matrix.images.name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ matrix.images.name }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ inputs.REGISTRY }}/${{ inputs.NAMESPACE }}/${{ matrix.images.name }}:${{ steps.meta.outputs.version }}
