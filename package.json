{
  "name": "dso-console",
  "version": "8.2.2",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "turbo run build --color --no-daemon",
    "build:clean": "turbo run build:clean --no-daemon",
    "dev": "docker compose -f ./docker/docker-compose.local.yml up -d && echo '\nStart server and client with commands:\n\n  pnpm --filter server run dev\n  pnpm --filter client run dev\n\nMake sure you provide env variables in `.env` files.'",
    "dev:clean": "docker compose -f ./docker/docker-compose.local.yml down",
    "dev:delete": "docker compose -f ./docker/docker-compose.local.yml down -v",
    "docker:dev": "docker compose -f ./docker/docker-compose.dev.yml up -d; docker compose -f ./docker/docker-compose.dev.yml watch --no-up & docker compose -f ./docker/docker-compose.dev.yml logs server client -f",
    "docker:dev:build": "export COMPOSE_FILE=./docker/docker-compose.dev.yml && ./ci/kind/run-build.sh $COMPOSE_FILE",
    "docker:dev:clean": "docker compose -f ./docker/docker-compose.dev.yml down",
    "docker:dev:delete": "docker compose -f ./docker/docker-compose.dev.yml down -v",
    "docker:e2e": "docker compose -f ./docker/docker-compose.dev.yml up -d; turbo run test:e2e --filter=client --color --no-daemon; docker compose -f ./docker/docker-compose.dev.yml down",
    "docker:e2e-ci": "docker compose -f ./docker/docker-compose.prod.yml up -d; turbo run test:e2e-ci --filter=client --color --no-daemon; docker compose -f ./docker/docker-compose.prod.yml down",
    "docker:integ": "docker compose --env-file apps/server/.env.integ -f ./docker/docker-compose.integ.yml up -d; docker compose --env-file apps/server/.env.integ -f ./docker/docker-compose.integ.yml watch --no-up & docker compose --env-file apps/server/.env.integ -f ./docker/docker-compose.integ.yml logs server client -f",
    "docker:integ:build": "export $(cat apps/server/.env.integ | grep -v '#' | xargs) && export COMPOSE_FILE=./docker/docker-compose.integ.yml && cd $(dirname $COMPOSE_FILE) && docker buildx bake --file $(basename $COMPOSE_FILE) --load && cd - > /dev/null",
    "docker:integ:clean": "docker compose --env-file apps/server/.env.integ -f ./docker/docker-compose.integ.yml down",
    "docker:integ:delete": "docker compose --env-file apps/server/.env.integ -f ./docker/docker-compose.integ.yml down -v",
    "docker:prod": "docker compose -f ./docker/docker-compose.prod.yml up",
    "docker:prod:build": "export COMPOSE_FILE=./docker/docker-compose.prod.yml && ./ci/kind/run-build.sh $COMPOSE_FILE",
    "docker:prod:delete": "docker compose -f ./docker/docker-compose.prod.yml down -v",
    "format": "turbo run format --color --no-daemon",
    "format:style": "turbo run format:style --color --no-daemon",
    "db:generate": "turbo run db:generate --no-daemon",
    "integ": "docker compose -f ./docker/docker-compose.local.yml up -d postgres pgadmin && echo '\nStart server and client with commands:\n\n  pnpm --filter server run integ\n  pnpm --filter client run integ\n\nMake sure you provide env variables in `.env.integ` files.'",
    "integ:clean": "docker compose -f ./docker/docker-compose.local.yml down",
    "integ:delete": "docker compose -f ./docker/docker-compose.local.yml down -v",
    "kube:init": "ci/kind/run.sh -i -d console.dso.local,keycloak.dso.local,pgadmin.dso.local",
    "kube:dev:build": "ci/kind/run.sh -c create,build,load -f docker/docker-compose.dev.yml",
    "kube:dev:load": "ci/kind/run.sh -c create,load -f docker/docker-compose.dev.yml",
    "kube:dev:run": "ci/kind/run.sh -c create,dev",
    "kube:dev": "pnpm kube:dev:build; pnpm kube:dev:run",
    "kube:integ:build": "pnpm kube:dev:build",
    "kube:integ:load": "pnpm kube:dev:load",
    "kube:integ:run": "ci/kind/run.sh -c create,dev,int",
    "kube:integ": "pnpm kube:int:build; pnpm kube:int:run",
    "kube:prod:build": "ci/kind/run.sh -c create,build,load -f docker/docker-compose.prod.yml",
    "kube:prod:load": "ci/kind/run.sh -c create,load -f docker/docker-compose.prod.yml",
    "kube:prod:run": "ci/kind/run.sh -c create,prod",
    "kube:prod": "pnpm kube:prod:build; pnpm kube:prod:run",
    "kube:e2e": "pnpm kube:dev; npm --prefix apps/client run kube:e2e",
    "kube:e2e-ci": "turbo run kube:e2e-ci --filter=client --color --no-daemon",
    "kube:clean": "ci/kind/run.sh -c clean",
    "kube:delete": "ci/kind/run.sh -c delete",
    "kube:load:package": "ci/kind/upload-package.sh",
    "lint": "turbo run lint --color --no-daemon",
    "prepare": "husky",
    "test": "turbo run test --concurrency 1 --color --no-daemon",
    "test:cov": "turbo run test:cov --color --no-daemon",
    "test:ct": "turbo run test:ct --color --no-daemon",
    "test:ct-ci": "turbo run test:ct-ci --color --no-daemon",
    "test:e2e": "pnpm kube:e2e",
    "test:e2e-ci": "pnpm kube:prod; pnpm kube:e2e-ci"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.2.2",
    "@commitlint/config-conventional": "^19.2.2",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "turbo": "^1.13.2"
  },
  "packageManager": "pnpm@9.1.1",
  "pnpm": {
    "patchedDependencies": {
      "fastify-keycloak-adapter@2.1.6": "patches/fastify-keycloak-adapter@2.1.6.patch",
      "fastify-keycloak-adapter@2.1.9": "patches/fastify-keycloak-adapter@2.1.9.patch",
      "fastify-keycloak-adapter@2.1.10": "patches/fastify-keycloak-adapter@2.1.10.patch"
    },
    "allowNonAppliedPatches": true
  },
  "volta": {
    "node": "20.12.2"
  }
}