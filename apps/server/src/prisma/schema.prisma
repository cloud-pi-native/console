generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Environment {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  projectId String   @db.Uuid
  status    String   @default("initializing")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  permissions Permission[]
}

model Log {
  id        String   @id @default(uuid()) @db.Uuid
  data      Json
  action    String   @default("")
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User    @relation(fields: [userId], references: [id])
}

model Organization {
  id        String   @id @unique @default(uuid()) @db.Uuid
  source    String
  name      String   @unique
  label     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
}

model Permission {
  id            String       @id @unique @default(uuid()) @db.Uuid
  userId        String       @db.Uuid
  environmentId String       @db.Uuid
  level         Int          @default(0) // TODO faire un enum 0,1,2 > voir 10, 20, 30
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([userId, environmentId])
}

model Project {
  id             String        @id @unique @default(uuid()) @db.Uuid
  name           String
  organizationId String        @db.Uuid
  description    String?
  status         String
  locked         Boolean       @default(false)
  services       Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  environments Environment[]
  repositories Repository[]
  roles        Role[]
}

model Repository {
  id               String   @id @default(uuid()) @db.Uuid
  projectId        String   @db.Uuid
  internalRepoName String
  externalRepoUrl  String
  externalUserName String?
  externalToken    String?
  isInfra          Boolean  @default(false)
  isPrivate        Boolean  @default(false)
  status           String   @default("initializing")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs        Log[]
  permissions Permission[]
  roles       Role[]
}

model Role {
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@unique([userId, projectId])
}
