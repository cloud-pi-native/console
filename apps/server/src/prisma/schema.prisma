generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Environment {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  projectId String   @db.Uuid
  status    String   @default("initializing")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])

  permissions Permission[]
}

model Log {
  id        Int      @id @default(autoincrement())
  data      Json
  action    String   @default("")
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Organization {
  id        String   @id @unique @default(uuid()) @db.Uuid
  source    String
  name      String   @unique
  label     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
}

model Permission {
  id            String      @id @unique @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  environmentId String      @db.Uuid
  level         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  environment   Environment @relation(fields: [environmentId], references: [id])
}

model Project {
  id                    String       @id @unique @default(uuid()) @db.Uuid
  name                  String
  organization          String       @db.Uuid
  description           String
  status                String
  locked                Boolean      @default(false)
  services              Json
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  organizationReference Organization @relation(fields: [organization], references: [id])

  environments  Environment[]
  repositories  Repository[]
  UsersProjects UsersProjects[]
}

model Repository {
  id               String   @id @default(uuid()) @db.Uuid
  projectId        String   @db.Uuid
  internalRepoName String
  externalRepoUrl  String
  externalUserName String
  externalToken    String
  isInfra          Boolean  @default(false)
  isPrivate        Boolean  @default(false)
  status           String   @default("initializing")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          Project  @relation(fields: [projectId], references: [id])
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs          Log[]
  permissions   Permission[]
  UsersProjects UsersProjects[]
}

model UsersProjects {
  UserId    String   @db.Uuid
  ProjectId String   @db.Uuid
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [UserId], references: [id])
  project   Project  @relation(fields: [ProjectId], references: [id])

  @@id([UserId, ProjectId])
}
