generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Environment {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar(11)
  projectId   String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  clusterId   String       @db.Uuid
  quotaId     String       @db.Uuid
  stageId     String       @db.Uuid
  cluster     Cluster      @relation(fields: [clusterId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quota       Quota        @relation(fields: [quotaId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  stage       Stage        @relation(fields: [stageId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  permissions Permission[]
}

model Log {
  id        String   @id @default(uuid()) @db.Uuid
  data      Json
  action    String   @default("")
  userId    String   @db.Uuid
  requestId String?  @db.VarChar(21)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Organization {
  id        String    @id @unique @default(uuid()) @db.Uuid
  source    String
  name      String    @unique
  label     String    @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
}

model Zone {
  id          String    @id @unique @default(uuid()) @db.Uuid
  slug        String    @unique @db.VarChar(10)
  label       String    @db.VarChar(50)
  description String?   @db.VarChar(200)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clusters    Cluster[]
}

model Permission {
  id            String      @id @unique @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  environmentId String      @db.Uuid
  level         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, environmentId])
}

model Project {
  id             String          @id @unique @default(uuid()) @db.Uuid
  name           String
  organizationId String          @db.Uuid
  description    String          @default("")
  status         ProjectStatus   @default(initializing)
  locked         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  environments   Environment[]
  organization   Organization    @relation(fields: [organizationId], references: [id])
  repositories   Repository[]
  roles          Role[]
  clusters       Cluster[]       @relation("ClusterToProject")
  projectPlugin  ProjectPlugin[]
}

model ProjectClusterHistory {
  projectId String @db.Uuid
  clusterId String @db.Uuid

  @@unique([projectId, clusterId])
}

model Repository {
  id               String   @id @default(uuid()) @db.Uuid
  projectId        String   @db.Uuid
  internalRepoName String
  externalRepoUrl  String
  externalUserName String?
  isInfra          Boolean  @default(false)
  isPrivate        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  logs        Log[]
  permissions Permission[]
  roles       Role[]
}

model Cluster {
  id               String         @id @unique @default(uuid()) @db.Uuid
  label            String         @unique @db.VarChar(50)
  privacy          ClusterPrivacy @default(dedicated)
  secretName       String         @unique @default(uuid()) @db.VarChar(50)
  clusterResources Boolean        @default(false)
  zoneId           String         @db.Uuid
  kubeConfigId     String         @unique @db.Uuid
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  infos            String?        @db.VarChar(200)
  zone             Zone           @relation(fields: [zoneId], references: [id])
  kubeconfig       Kubeconfig     @relation(fields: [kubeConfigId], references: [id], onDelete: Cascade)
  environments     Environment[]
  projects         Project[]      @relation("ClusterToProject")
  stages           Stage[]        @relation("ClusterToStage")
}

model Kubeconfig {
  id            String   @id @unique @default(uuid()) @db.Uuid
  user          Json
  cluster       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parentCluster Cluster?
}

model Role {
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  role      RoleList
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@unique([userId, projectId])
}

model Quota {
  id           String        @id @unique @default(uuid()) @db.Uuid
  memory       String        @db.VarChar
  cpu          Float         @db.Real
  name         String        @unique @db.VarChar
  isPrivate    Boolean       @default(false)
  environments Environment[]
  stages       Stage[]
}

model Stage {
  id           String        @id @unique @default(uuid()) @db.Uuid
  name         String        @unique @db.VarChar
  environments Environment[]
  clusters     Cluster[]     @relation("ClusterToStage")
  quotas       Quota[]
}

model ProjectPlugin {
  pluginName String
  projectId  String  @db.Uuid
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  key        String
  value      String

  @@unique([projectId, pluginName, key])
}

model AdminPlugin {
  pluginName String
  key        String
  value      String

  @@unique([pluginName, key])
}

model SystemSetting {
  key   String @unique @id
  value String
}

enum ClusterPrivacy {
  public
  dedicated
}

enum ProjectStatus {
  initializing
  created
  failed
  archived
}

enum RoleList {
  owner
  user
}
