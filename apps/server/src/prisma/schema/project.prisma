model Environment {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(11)
  projectId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clusterId String   @db.Uuid
  quotaId   String   @db.Uuid
  stageId   String   @db.Uuid
  cluster   Cluster  @relation(fields: [clusterId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quota     Quota    @relation(fields: [quotaId], references: [id])
  stage     Stage    @relation(fields: [stageId], references: [id])

  @@unique([projectId, name])
}

model Repository {
  id               String   @id @default(uuid()) @db.Uuid
  projectId        String   @db.Uuid
  internalRepoName String
  externalRepoUrl  String   @default("")
  externalUserName String   @default("")
  isInfra          Boolean  @default(false)
  isPrivate        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectClusterHistory {
  projectId String @db.Uuid
  clusterId String @db.Uuid

  @@unique([projectId, clusterId])
}

model ProjectMembers {
  projectId String   @db.Uuid
  userId    String   @db.Uuid
  roleIds   String[]
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ProjectPlugin {
  pluginName String
  projectId  String  @db.Uuid
  key        String
  value      String
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, pluginName, key])
}

model ProjectRole {
  id          String  @id @unique @default(uuid()) @db.Uuid
  name        String
  permissions BigInt
  projectId   String  @db.Uuid
  position    Int     @db.SmallInt
  project     Project @relation(fields: [projectId], references: [id])
}

model Project {
  id             String           @id @unique @default(uuid()) @db.Uuid
  name           String
  description    String           @default("")
  status         ProjectStatus    @default(initializing)
  locked         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  everyonePerms  BigInt           @default(896)
  ownerId        String           @db.Uuid
  environments   Environment[]
  logs           Log[]
  owner          User             @relation(fields: [ownerId], references: [id])
  members        ProjectMembers[]
  plugins        ProjectPlugin[]
  roles          ProjectRole[]
  repositories   Repository[]
  clusters       Cluster[]        @relation("ClusterToProject")
  slug           String           @unique

  lastSuccessProvisionningVersion String?
}

enum ProjectStatus {
  initializing
  created
  failed
  archived
  warning
}
