diff --git a/src/model.js b/src/model.js
index 8c9e53392624c69c21ede22d7f55f9b1a34d315f..ec4f894747d76c6f315ba1c3142b7f0da11d60a3 100644
--- a/src/model.js
+++ b/src/model.js
@@ -335,10 +335,13 @@ fakeModel.prototype.findAndCountAll =  function (options) {
  * to `false`.
  * 
  * @instance
+	* @method findByPk
+ * @alias findById
  * @param {Integer} id ID of the instance
  * @return {Promise<Instance>} Promise that resolves with an instance with the given ID
  **/
-fakeModel.prototype.findById = function (id) {
+fakeModel.prototype.findById =
+fakeModel.prototype.findByPk = function (id) {
 	var self = this;
 	
 	return this.$query({
@@ -455,7 +458,15 @@ fakeModel.prototype.build = function (values, options) {
 	}
 	
 	values = _.extend({}, this._defaults, values);
-	
+	const keys = Object.keys(this.Instance.prototype);
+
+	keys.forEach(key => {
+		if (key.substring(0, 10) === 'getValueOf') {
+			const modelName = Utils.lowercaseFirst(key.split('getValueOf')[1]);
+			values[modelName] = this.Instance.prototype[key]()
+			values[Utils.pluralize(modelName)] = this.Instance.prototype[key]()
+		}
+	})
 	return new this.Instance(values, options);
 };
 /**
@@ -624,7 +635,9 @@ fakeModel.prototype.belongsTo = fakeModel.prototype.hasOne = function (item, opt
 	
 	if(isString) {
 		this.Instance.prototype['get' + singular] = function (opts) { return Promise.resolve(new self.Instance(opts && opts.where ? opts.where : opts)); };
+			this.Instance.prototype['getValueOf' + singular] = () => new self.Instance(opts && opts.where ? opts.where : opts);
 	} else {
+		this.Instance.prototype['getValueOf' + singular] = () => item._defaults;
 		this.Instance.prototype['get' + singular] = item.findOne.bind(item);
 	}
 	this.Instance.prototype['set' + singular] = noop;