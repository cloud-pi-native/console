name: Tests - unit

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        required: true
        type: string
      PNPM_VERSION:
        required: true
        type: string
    secrets:
      SONAR_HOST_URL:
        required: false
      SONAR_TOKEN:
        required: false
      SONAR_PROJECT_KEY:
        required: false

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: "${{ inputs.PNPM_VERSION }}"
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache turbo files
        uses: actions/cache@v3
        with:
          path: |
            .turbo/cache
            **/coverage
          key: turbo-${{ runner.os }}-${{ runner.arch }}-unit-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-${{ runner.arch }}-unit-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          ./ci/scripts/init-env.sh
          ./ci/scripts/run-tests.sh -u

      - name: Upload vitest coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-coverage
          path: |
            ./apps/**/coverage
            ./packages/**/coverage
          retention-days: 1

  check-secrets:
    name: Check if Sonar secrets are set
    runs-on: ubuntu-latest
    needs:
      - unit-tests
    outputs:
      run-scan: ${{ steps.check-secrets.outputs.run-scan }}
    steps:
      - name: Check for sonar secrets
        id: check-secrets
        run: |
          if [ "${{ secrets.SONAR_HOST_URL }}" != "" ] && [ "${{ secrets.SONAR_TOKEN }}" != "" ] && [ "${{ secrets.SONAR_PROJECT_KEY }}" != "" ]; then
            echo "run-scan=true" >> $GITHUB_OUTPUT
          else
            echo "run-scan=false" >> $GITHUB_OUTPUT
          fi

  code-scan:
    name: Run code quality analysis
    runs-on: ubuntu-latest
    needs:
      - check-secrets
    if: ${{ needs.check-secrets.outputs.run-scan == 'true' }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: unit-tests-coverage
          path: ./coverage

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: "${{ inputs.PNPM_VERSION }}"
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ inputs.NODE_VERSION }}"
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=./apps,./packages
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.javascript.lcov.reportPaths=./coverage/**/coverage/lcov.info
            -Dsonar.coverage.exclusions=./**/*.spec.js,**/*.spec.ts,**/*.vue,**/assets/**,**/cypress/**
            -Dsonar.scm.provider=git
            -Dsonar.pullrequest.provider=github
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
          # -Dsonar.branch.name=${{ github.event.pull_request.head.ref }}
        continue-on-error: true
            
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        timeout-minutes: 5
        continue-on-error: true
