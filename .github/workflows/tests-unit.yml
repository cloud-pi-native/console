name: Tests - unit

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        required: true
        type: string
      PNPM_VERSION:
        required: true
        type: string
    secrets:
      SONAR_HOST_URL:
        required: false
      SONAR_TOKEN:
        required: false
      SONAR_PROJECT_KEY:
        required: false
  workflow_dispatch:
    inputs:
      NODE_VERSION:
        description: Nodejs version used to run tests
        required: true
        type: string
        default: 22.14.0
      PNPM_VERSION:
        description: Pnpm version used to run tests
        required: true
        type: string
        default: 10.5.2

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    outputs:
      turbo-cache: ${{ steps.turbo-cache.outputs.TURBO_CACHE_PATHS }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          version: "${{ inputs.PNPM_VERSION }}"
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ inputs.NODE_VERSION }}"

      - name: Get pnpm store directory
        id: pnpm-store
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache node files
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            node-${{ runner.os }}-${{ runner.arch }}-

      - name: Get turbo cache directories
        id: turbo-cache
        run: |
          TURBO_CACHE_PATHS=""
          for pkg in $(find ./apps ./packages ./plugins -type d -mindepth 1 -maxdepth 1 -not -path "**/node_modules"); do
            if [ -z "$TURBO_CACHE_PATHS" ]; then
          TURBO_CACHE_PATHS="$pkg/dist
          $pkg/types
          $pkg/coverage"
            else
          TURBO_CACHE_PATHS="$TURBO_CACHE_PATHS
          $pkg/dist
          $pkg/types
          $pkg/coverage"
            fi
          done
          echo "TURBO_CACHE_PATHS<<EOF" >> $GITHUB_OUTPUT
          echo "$TURBO_CACHE_PATHS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Cache turbo files
        uses: actions/cache@v4
        with:
          path: |
            ./.turbo/cache
            ${{ steps.turbo-cache.outputs.TURBO_CACHE_PATHS }}
          key: turbo-unit-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('apps/**/src/**','packages/**/src/**','plugins/**/src/**') }}
          restore-keys: |
            turbo-unit-${{ runner.os }}-${{ runner.arch }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          ./ci/scripts/init-env.sh
          ./ci/scripts/run-tests.sh -u

      - name: Upload vitest coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-coverage
          path: |
            ./apps/**/coverage/lcov.info
            ./packages/**/coverage/lcov.info
          retention-days: 1

  check-secrets:
    name: Check if Sonar secrets are set
    runs-on: ubuntu-latest
    needs:
      - unit-tests
    outputs:
      run-scan: ${{ steps.check-secrets.outputs.run-scan }}
    steps:
      - name: Check for sonar secrets
        id: check-secrets
        run: |
          if [ "${{ secrets.SONAR_HOST_URL }}" != "" ] && [ "${{ secrets.SONAR_TOKEN }}" != "" ] && [ "${{ secrets.SONAR_PROJECT_KEY }}" != "" ]; then
            echo "run-scan=true" >> $GITHUB_OUTPUT
          else
            echo "run-scan=false" >> $GITHUB_OUTPUT
          fi

  code-scan:
    name: Run code quality analysis
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - check-secrets
    if: ${{ needs.check-secrets.outputs.run-scan == 'true' }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: unit-tests-coverage
          path: ./coverage

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          version: "${{ inputs.PNPM_VERSION }}"
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ inputs.NODE_VERSION }}"

      - name: Get pnpm store directory
        id: pnpm-store
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache node files
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: node-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            node-${{ runner.os }}-${{ runner.arch }}-

      - name: Cache turbo files
        uses: actions/cache@v4
        with:
          path: |
            ./.turbo/cache
            ${{ needs.unit-tests.outputs.turbo-cache }}
          key: turbo-unit-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('apps/**/src/**','packages/**/src/**','plugins/**/src/**') }}
          restore-keys: |
            turbo-unit-${{ runner.os }}-${{ runner.arch }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set sonarqube args
        id: sonar-args
        run: |
          echo "SONAR_ARGS_PR=-Dsonar.pullrequest.provider=github -Dsonar.pullrequest.key=${{ github.event.number }} -Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.pullrequest.github.repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "SONAR_ARGS_BRANCH=-Dsonar.branch.name=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=apps,packages
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.javascript.lcov.reportPaths=coverage/apps/server/coverage/lcov.info,coverage/apps/client/coverage/lcov.info,coverage/packages/shared/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.spec.js,**/*.spec.ts,**/*.vue,**/assets/**,**/cypress/**,**/packages/test-utils/**,apps/server/src/plugins/**
            -Dsonar.cpd.exclusions=**/*.spec.js,**/*.spec.ts,**/cypress/**
            -Dsonar.scm.provider=git
            ${{ github.event_name == 'pull_request' && steps.sonar-args.outputs.SONAR_ARGS_PR || steps.sonar-args.outputs.SONAR_ARGS_BRANCH }}
        continue-on-error: true

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        timeout-minutes: 5
        continue-on-error: true
