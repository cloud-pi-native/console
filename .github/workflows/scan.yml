name: Scan application

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
  workflow_dispatch:

jobs:
  build-matrix:
    name: Init build (Create matrix)
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.build-matrix.outputs.images }}
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Generate matrix for build
        id: build-matrix
        run: |
          echo 'images<<EOF' >> $GITHUB_OUTPUT
          ./ci/scripts/build-matrix.sh -f ./docker/docker-compose.prod.yml -c >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  build:
    name: Build application
    runs-on: ubuntu-latest
    needs:
      - build-matrix
    strategy:
      matrix:
        images: ${{ fromJSON(needs.build-matrix.outputs.images) }}
    steps:
      - name: Checks-out repository
        if: ${{ matrix.images.build != false }}
        uses: actions/checkout@v3
      - name: Set up Docker buildx
        if: ${{ matrix.images.build != false }}
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU (for multi platform build)
        if: ${{ matrix.images.build != false }}
        uses: docker/setup-qemu-action@v2
      - name: Create image directory
        if: ${{ matrix.images.build != false }}
        run: mkdir ./artifacts
      - name: Build docker image
        if: ${{ matrix.images.build != false }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.images.build.context }}
          file: ${{ matrix.images.build.dockerfile }}
          tags: ${{ matrix.images.image }}
          target: ${{ matrix.images.build.target }}
          platforms: ${{ matrix.images.build.platforms }}
          outputs: type=docker,dest=./artifacts/${{ matrix.images.name }}.tar
      - name: Upload artifact
        if: ${{ matrix.images.build != false }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.images.name }}
          path: ./artifacts/${{ matrix.images.name }}.tar
          retention-days: 1

  images-scan:
    name: Scan images vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - build-matrix
      - build
    strategy:
      matrix:
        images: ${{ fromJSON(needs.build-matrix.outputs.images) }}
    steps:
      - name: Set up Docker buildx
        if: ${{ matrix.images.build != false }}
        uses: docker/setup-buildx-action@v2
      - name: Download artifact
        if: ${{ matrix.images.build != false }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.images.name }}
          path: ./artifacts
      - name: Load Docker image
        if: ${{ matrix.images.build != false }}
        run: docker load --input ./artifacts/${{ matrix.images.name }}.tar
      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/images/
      - name: Run Trivy vulnerability scanner on images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.images.image }}"
          format: "json"
          exit-code: "1"
          vuln-type: "os,library"
          security-checks: "vuln,secret,config"
          ignore-unfixed: true
          output: "./artifacts/vulnerability-report/images/${{ matrix.images.name }}.json"
        continue-on-error: true
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  config-scan:
    name: Scan config files vulnerabilities
    runs-on: ubuntu-latest
    needs:
      - build-matrix
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Create security artifacts directory
        run: mkdir -p ./artifacts/vulnerability-report/configs/
      - name: Run Trivy vulnerability scanner on config files
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: "."
          scan-type: "config"
          format: "json"
          exit-code: "1"
          ignore-unfixed: true
          output: "./artifacts/vulnerability-report/configs/config.json"
        continue-on-error: true
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report/
          retention-days: 14

  vulnerability-report:
    name: Build vulnerability report
    runs-on: ubuntu-latest
    needs:
      - build-matrix
      - images-scan
      - config-scan
    steps:
      - name: Checks-out repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: vulnerability-report
          path: ./artifacts/vulnerability-report
      - name: Build vulnerability report
        run: |
          ./ci/scripts/vuln-report.sh \
            -i "./artifacts/vulnerability-report" \
            -o "./artifacts/vulnerability-issue.md" \
            -p "${{ github.repository }}" \
            -r "${{ github.run_id }}"
          echo 'REPORT_BODY<<EOF' >> $GITHUB_ENV
          cat ./artifacts/vulnerability-issue.md >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Create security report issue
        uses: imjohnbo/issue-bot@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          labels: "security"
          title: "Vulnerability scan report"
          pinned: false
          close-previous: true
          body: ${{ env.REPORT_BODY }}
