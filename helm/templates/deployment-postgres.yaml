---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ .Release.Name }}-postgres
  name: {{ .Release.Name }}-postgres
spec:
  replicas: 1
  serviceName: {{ $.Release.Name }}-postgres-service
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgres
    spec:
      {{- if and .Values.imageCredentials.username .Values.imageCredentials.password }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-pullsecret
      {{- end }}
      containers:
      - name: {{ .Release.Name }}-postgres
        imagePullPolicy: {{ .Values.postgres.container.imagePullPolicy }}
        image: {{ .Values.postgres.container.image }}
        ports:
        - containerPort: {{ .Values.postgres.service.port }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-postgres-cm
{{- $data := dict "globalenv" .Values.globalEnv "release" $.Release.Name -}}
{{- include "useGlobalCm" $data | indent 8 }}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: {{ .Release.Name }}-db-storage
        resources: {{- toYaml .Values.postgres.container.resources | nindent 10 }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-db-storage
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.postgres.pvc.size }}
