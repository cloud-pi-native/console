---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-server
  name: {{ .Release.Name }}-server
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-server
      name: {{ .Release.Name }}-server
      namespace: {{ .Release.Namespace | quote }}
    spec:
      serviceAccountName: {{ $.Release.Name }}-console-sa
      restartPolicy: Always
      {{- if and .Values.imageCredentials.username .Values.imageCredentials.password }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-pullsecret
      {{- end }}
      {{- if  .Values.server.plugins }}
      initContainers:
      - image: busybox
        name: fetch-plugins
        command:
        - sh
        - /script/fetch
        volumeMounts:
        - name: fetch-script
          mountPath: /script
        - name: plugins
          mountPath: /plugins
      {{- end }}
      containers:
      - image: {{ .Values.server.container.image }}
        imagePullPolicy: {{ .Values.server.container.imagePullPolicy }}
        name: {{ $.Release.Name }}-server
        ports:
        - containerPort: {{ .Values.server.container.port }}
        envFrom:
        - configMapRef:
            name: {{ .Values.server.dsoConfig.name }}
        - configMapRef:
            name: {{ $.Release.Name }}-server-cm
        {{- include "useGlobalCm" $data | nindent 8 }}
        resources: {{- toYaml .Values.server.container.resources | nindent 10 }}
        {{- if .Values.server.container.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.server.container.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
        {{- end }}
        {{- if .Values.server.container.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.server.container.port }}
          failureThreshold: 10
          periodSeconds: 4
        {{- end }}
        volumeMounts:
        {{- if .Values.server.container.dataConfigmap }}
        - name: imports
          mountPath: /app/dist/init/db/imports
        {{- end }}
        {{- if and .Values.server.plugins (len .Values.server.plugins) }}
        - name: plugins
          mountPath: /app/dist/plugins/external
        {{- end }}
        {{- range $volumeMount := .Values.server.container.extraVolumeMounts }}
        - name: {{ $volumeMount.name }}
          mountPath: {{ $volumeMount.mountPath }}
        {{- end }}
        - name: config
          mountPath: /config
      volumes:
      - name: config
        projected:
          sources:
          {{- if .Values.server.extraCa.name }}
          - configMap:
              name: {{ .Values.server.extraCa.name }}
              items:
              - key: {{ .Values.server.extraCa.key }}
                path: ca_certs
          {{- end }}
      {{- range $volume := .Values.server.container.extraVolumes }}
      - name: {{ $volume.name }}
        {{- if eq $volume.type "hostPath" }}
        hostPath:
          path: {{ $volume.path }}
        {{- end }}
        {{- if eq $volume.type "configMap" }}
        configMap:
          name: {{ $volume.name }}
        {{- end }}
      {{- end }}
      {{- if .Values.server.container.dataConfigmap }}
      - name: imports
        configMap: 
          name: {{ .Values.server.container.dataConfigmap }}
      {{- end }}
      {{- if and .Values.server.plugins (len .Values.server.plugins) }}
      - name: plugins
        emptyDir: {}
      - name: fetch-script
        configMap:
          name: {{ $.Release.Name }}-fetch-script
      {{- end }}
